
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bfscrjrjwbzpldamcrbz.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJmc2NyanJqd2J6cGxkYW1jcmJ6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI4NDQwMTMsImV4cCI6MjA1ODQyMDAxM30.k_3L-f1nzP8zwrKFD5NY1BBiSsTymT8dDqM-fVOcW7I";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      storage: typeof localStorage !== 'undefined' ? localStorage : undefined
    }
  }
);

// Initialize the storage bucket for transcripts if it doesn't exist
(async () => {
  if (typeof window !== 'undefined') {
    try {
      const { data: buckets, error } = await supabase.storage.listBuckets();
      
      if (error) {
        console.error('Error fetching storage buckets:', error);
        return;
      }
      
      const transcriptsBucketExists = buckets?.find(bucket => bucket.name === 'transcripts');
      
      if (!transcriptsBucketExists) {
        console.log('Creating transcripts storage bucket');
        const { error: createError } = await supabase.storage.createBucket('transcripts', {
          public: true,
          fileSizeLimit: 10485760, // 10MB
        });
        
        if (createError) {
          console.error('Error creating transcripts bucket:', createError);
        } else {
          console.log('Transcripts bucket created successfully');
        }
      }
    } catch (error) {
      console.error('Error initializing storage bucket:', error);
    }
  }
})();
